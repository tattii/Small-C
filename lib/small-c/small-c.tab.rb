#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'
module SmallC
  class Parse < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
    48,   131,    69,    71,    79,    72,    25,    73,    98,   132,
    98,    51,    79,    52,    53,    54,    27,    98,    48,   128,
    69,    71,    27,    72,    23,    73,    43,    31,    67,    51,
    68,    52,    53,    54,    27,    99,    48,    99,    69,    71,
    23,    72,    23,    73,    99,    24,    67,    51,    68,    52,
    53,    54,    27,    79,    48,    79,    69,    71,    42,    72,
   130,    73,   129,    89,    67,    51,    68,    52,    53,    54,
    27,    44,    48,    30,    69,    71,   104,    72,    75,    73,
     8,     9,    67,    51,    68,    52,    53,    54,    27,    77,
    48,    80,    69,    71,    81,    72,    82,    73,     8,     9,
    67,    51,    68,    52,    53,    54,    27,    69,    71,    32,
    72,    85,    73,   133,    69,    71,   134,    72,    67,    73,
    68,    69,    71,    22,    72,    89,    73,    69,    71,    18,
    72,    79,    73,    67,   139,    68,    69,    71,   140,    72,
    67,    73,    68,    69,    71,   110,    72,    67,    73,    68,
    10,    69,    71,    67,    72,    68,    73,   143,    69,    71,
   100,    72,    67,    73,    68,    69,    71,   nil,    72,    67,
    73,    68,   nil,    69,    71,   nil,    72,    67,    73,    68,
    69,    71,   nil,    72,    67,    73,    68,    69,    71,   nil,
    72,    67,    73,    68,   nil,    69,    71,   nil,    72,    67,
    73,    68,    69,    71,   nil,    72,    67,    73,    68,    69,
    71,   nil,    72,    67,    73,    68,   nil,    69,    71,   nil,
    72,    67,    73,    68,    69,    71,   nil,    72,    67,    73,
    68,    69,    71,   nil,    72,    67,    73,    68,   nil,    69,
    71,   nil,    72,    67,    73,    68,    69,    71,   nil,    72,
    67,    73,    68,    69,    71,   nil,    72,    67,    73,    68,
   nil,    69,    71,   nil,    72,    67,    73,    68,    69,    71,
   nil,    72,    67,    73,    68,    69,    71,   nil,    72,    67,
    73,    68,   nil,    69,    71,   nil,    72,    67,    73,    68,
    69,    71,   nil,    72,    67,    73,    68,    69,    71,   nil,
    72,    67,    73,    68,    92,    93,    94,    95,   nil,    67,
   nil,    68,    92,    93,    94,    95,    67,   nil,    68,    92,
    93,    94,    95,    67,   nil,    68,    96,    97,    90,    91,
     8,     9,    15,    16,    19,    20,    87,    88,    29,    30,
     8,     9,    96,    97,    96,    97,    78,    79,    96,    97,
     8,     9,    96,    97,     8,     9,    29,    30,    47,    46,
    90,    91,     8,     9 ]

racc_action_check = [
   143,   109,   143,   143,   124,   143,    17,   143,    64,   124,
   120,   143,   105,   143,   143,   143,   143,   121,    56,   105,
    56,    56,    17,    56,    22,    56,    33,    22,   143,    56,
   143,    56,    56,    56,    56,    64,   139,   120,   139,   139,
    30,   139,    16,   139,   121,    16,    56,   139,    56,   139,
   139,   139,   139,   108,    38,   107,    38,    38,    32,    38,
   108,    38,   107,   112,   139,    38,   139,    38,    38,    38,
    38,    34,   129,    29,   129,   129,    71,   129,    41,   129,
    39,    39,    38,   129,    38,   129,   129,   129,   129,    47,
   130,    51,   130,   130,    52,   130,    53,   130,     0,     0,
   129,   130,   129,   130,   130,   130,   130,    97,    97,    23,
    97,    55,    97,   125,    73,    73,   126,    73,   130,    73,
   130,    79,    79,    15,    79,    60,    79,    69,    69,    10,
    69,    84,    69,    97,   135,    97,    68,    68,   137,    68,
    73,    68,    73,    67,    67,    83,    67,    79,    67,    79,
     1,    80,    80,    69,    80,    69,    80,   142,    81,    81,
    66,    81,    68,    81,    68,    82,    82,   nil,    82,    67,
    82,    67,   nil,    87,    87,   nil,    87,    80,    87,    80,
    88,    88,   nil,    88,    81,    88,    81,   140,   140,   nil,
   140,    82,   140,    82,   nil,   104,   104,   nil,   104,    87,
   104,    87,   100,   100,   nil,   100,    88,   100,    88,    99,
    99,   nil,    99,   140,    99,   140,   nil,    98,    98,   nil,
    98,   104,    98,   104,   134,   134,   nil,   134,   100,   134,
   100,   131,   131,   nil,   131,    99,   131,    99,   nil,    96,
    96,   nil,    96,    98,    96,    98,    95,    95,   nil,    95,
   134,    95,   134,    89,    89,   nil,    89,   131,    89,   131,
   nil,    93,    93,   nil,    93,    96,    93,    96,    92,    92,
   nil,    92,    95,    92,    95,    91,    91,   nil,    91,    89,
    91,    89,   nil,    90,    90,   nil,    90,    93,    90,    93,
    54,    54,   nil,    54,    92,    54,    92,    94,    94,   nil,
    94,    91,    94,    91,   115,   115,   115,   115,   nil,    90,
   nil,    90,   114,   114,   114,   114,    54,   nil,    54,    62,
    62,    62,    62,    94,   nil,    94,    63,    63,    61,    61,
     2,     2,     7,     7,    12,    12,    59,    59,    20,    20,
    24,    24,   119,   119,   118,   118,    49,    49,   117,   117,
    44,    44,   116,   116,    27,    27,    37,    37,    36,    36,
   113,   113,    31,    31 ]

racc_action_pointer = [
    87,   150,   319,   nil,   nil,   nil,   nil,   328,   nil,   nil,
   129,   nil,   332,   nil,   nil,   118,    36,     4,   nil,   nil,
   334,   nil,    18,   102,   329,   nil,   nil,   343,   nil,    68,
    34,   351,    50,    16,    68,   nil,   354,   352,    52,    69,
   nil,    68,   nil,   nil,   339,   nil,   nil,    84,   nil,   344,
   nil,    82,    85,    87,   286,    92,    16,   nil,   nil,   316,
   103,   305,   294,   297,     4,   nil,   154,   139,   132,   123,
   nil,    67,   nil,   110,   nil,   nil,   nil,   nil,   nil,   117,
   147,   154,   161,   143,   128,   nil,   nil,   169,   176,   249,
   279,   271,   264,   257,   293,   242,   235,   103,   213,   205,
   198,   nil,   nil,   nil,   191,     9,   nil,    52,    50,    -1,
   nil,   nil,    41,   337,   287,   279,   323,   319,   315,   313,
     6,    13,   nil,   nil,     1,   103,   113,   nil,   nil,    70,
    88,   227,   nil,   nil,   220,   120,   nil,   136,   nil,    34,
   183,   nil,   147,    -2,   nil ]

racc_action_default = [
    -2,   -83,    -1,    -3,    -5,    -6,    -7,   -83,   -26,   -27,
   -83,    -4,   -83,    -9,   -11,   -83,   -13,   -83,   145,    -8,
   -83,   -12,   -13,   -83,   -19,   -15,   -18,   -37,   -10,   -83,
   -13,   -19,   -83,   -83,   -20,   -21,   -83,   -83,   -41,   -38,
   -39,   -83,   -14,   -16,   -83,   -23,   -24,   -83,   -28,   -83,
   -30,   -83,   -83,   -83,   -45,   -83,   -42,   -43,   -47,   -49,
   -51,   -53,   -55,   -58,   -63,   -66,   -69,   -83,   -83,   -83,
   -73,   -76,   -77,   -83,   -40,   -17,   -22,   -25,   -29,   -83,
   -83,   -83,   -45,   -83,   -46,   -36,   -44,   -83,   -83,   -83,
   -83,   -83,   -83,   -83,   -83,   -83,   -83,   -83,   -83,   -83,
   -83,   -70,   -71,   -72,   -79,   -83,   -48,   -83,   -83,   -83,
   -35,   -50,   -52,   -54,   -56,   -57,   -59,   -60,   -61,   -62,
   -64,   -65,   -67,   -68,   -83,   -83,   -80,   -81,   -78,   -83,
   -83,   -45,   -74,   -75,   -83,   -31,   -33,   -83,   -82,   -83,
   -45,   -32,   -83,   -83,   -34 ]

racc_goto_table = [
    57,    84,    83,    21,    40,     7,   106,     7,   101,   102,
   103,     3,    33,    11,   111,     1,    74,    21,    86,    41,
   105,   116,   117,   118,   119,   120,   121,   107,   108,    84,
   109,   127,    37,   114,   115,    45,    38,    55,    39,   122,
   123,    56,    76,   112,    37,   113,    26,   124,    17,    28,
     2,   125,   126,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   138,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    84,   137,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    84,   142,   nil,
   nil,   135,   136,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   141,   nil,   nil,   nil,   144 ]

racc_goto_check = [
    17,    18,    19,    10,     4,     7,    24,     7,    31,    31,
    31,     3,    12,     3,    24,     1,     4,    10,    17,    12,
    18,    29,    29,    29,    29,    30,    30,    18,    18,    18,
    19,    24,     7,    28,    28,    16,    20,    21,    22,    31,
    31,    23,    15,    26,     7,    27,    13,    18,    11,     9,
     2,    34,    35,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    24,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    18,    19,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    18,    19,   nil,
   nil,    17,    17,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    17,   nil,   nil,   nil,    17 ]

racc_goto_pointer = [
   nil,    15,    50,    11,   -23,   nil,   nil,     5,   nil,    29,
   -12,    41,   -12,    29,   nil,    -2,    -1,   -38,   -53,   -52,
     9,    -1,    11,     3,   -73,   nil,   -45,   -44,   -57,   -71,
   -71,   -59,   nil,   nil,   -53,   -52 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     4,     5,     6,    36,    12,    13,
    14,   nil,   nil,    50,    34,    35,   nil,   nil,    49,   nil,
   nil,   nil,   nil,   nil,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    70,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 34, :_reduce_none,
  0, 34, :_reduce_none,
  1, 35, :_reduce_3,
  2, 35, :_reduce_4,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  3, 37, :_reduce_8,
  1, 41, :_reduce_9,
  3, 41, :_reduce_10,
  1, 42, :_reduce_11,
  2, 42, :_reduce_12,
  1, 43, :_reduce_13,
  4, 43, :_reduce_14,
  3, 38, :_reduce_15,
  4, 44, :_reduce_16,
  5, 44, :_reduce_17,
  3, 39, :_reduce_18,
  0, 45, :_reduce_19,
  1, 45, :_reduce_none,
  1, 47, :_reduce_21,
  3, 47, :_reduce_22,
  2, 48, :_reduce_23,
  1, 49, :_reduce_24,
  2, 49, :_reduce_25,
  1, 40, :_reduce_26,
  1, 40, :_reduce_27,
  1, 50, :_reduce_28,
  2, 50, :_reduce_29,
  1, 50, :_reduce_none,
  5, 50, :_reduce_31,
  7, 50, :_reduce_32,
  5, 50, :_reduce_33,
  9, 50, :_reduce_34,
  3, 50, :_reduce_35,
  4, 46, :_reduce_36,
  0, 53, :_reduce_37,
  1, 53, :_reduce_none,
  1, 55, :_reduce_39,
  2, 55, :_reduce_40,
  0, 54, :_reduce_41,
  1, 54, :_reduce_none,
  1, 56, :_reduce_43,
  2, 56, :_reduce_44,
  0, 52, :_reduce_45,
  1, 52, :_reduce_none,
  1, 51, :_reduce_47,
  3, 51, :_reduce_48,
  1, 57, :_reduce_none,
  3, 57, :_reduce_50,
  1, 58, :_reduce_none,
  3, 58, :_reduce_52,
  1, 59, :_reduce_none,
  3, 59, :_reduce_54,
  1, 60, :_reduce_none,
  3, 60, :_reduce_56,
  3, 60, :_reduce_57,
  1, 61, :_reduce_none,
  3, 61, :_reduce_59,
  3, 61, :_reduce_60,
  3, 61, :_reduce_61,
  3, 61, :_reduce_62,
  1, 62, :_reduce_none,
  3, 62, :_reduce_64,
  3, 62, :_reduce_65,
  1, 63, :_reduce_none,
  3, 63, :_reduce_67,
  3, 63, :_reduce_68,
  1, 64, :_reduce_none,
  2, 64, :_reduce_70,
  2, 64, :_reduce_71,
  2, 64, :_reduce_72,
  1, 65, :_reduce_73,
  4, 65, :_reduce_74,
  4, 65, :_reduce_75,
  1, 66, :_reduce_76,
  1, 66, :_reduce_77,
  3, 66, :_reduce_78,
  0, 67, :_reduce_79,
  1, 67, :_reduce_none,
  1, 68, :_reduce_81,
  3, 68, :_reduce_82 ]

racc_reduce_n = 83

racc_shift_n = 145

racc_token_table = {
  false => 0,
  :error => 1,
  ";" => 2,
  "," => 3,
  "*" => 4,
  :IDENT => 5,
  "[" => 6,
  :NUMBER => 7,
  "]" => 8,
  "(" => 9,
  ")" => 10,
  :INT => 11,
  :VOID => 12,
  :IF => 13,
  :ELSE => 14,
  :WHILE => 15,
  :FOR => 16,
  :RETURN => 17,
  "{" => 18,
  "}" => 19,
  "=" => 20,
  "||" => 21,
  "&&" => 22,
  "==" => 23,
  "!=" => 24,
  "<" => 25,
  ">" => 26,
  "<=" => 27,
  ">=" => 28,
  "+" => 29,
  "-" => 30,
  "/" => 31,
  "&" => 32 }

racc_nt_base = 33

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\";\"",
  "\",\"",
  "\"*\"",
  "IDENT",
  "\"[\"",
  "NUMBER",
  "\"]\"",
  "\"(\"",
  "\")\"",
  "INT",
  "VOID",
  "IF",
  "ELSE",
  "WHILE",
  "FOR",
  "RETURN",
  "\"{\"",
  "\"}\"",
  "\"=\"",
  "\"||\"",
  "\"&&\"",
  "\"==\"",
  "\"!=\"",
  "\"<\"",
  "\">\"",
  "\"<=\"",
  "\">=\"",
  "\"+\"",
  "\"-\"",
  "\"/\"",
  "\"&\"",
  "$start",
  "target",
  "program",
  "external_declaration",
  "declaration",
  "function_prototype",
  "function_definition",
  "type_specifier",
  "declarator_list",
  "declarator",
  "direct_declarator",
  "function_declarator",
  "param_type_list_opt",
  "compound_statement",
  "param_type_list",
  "param_declaration",
  "param_declarator",
  "statement",
  "expression",
  "expression_opt",
  "declaration_list_opt",
  "statement_list_opt",
  "declaration_list",
  "statement_list",
  "assign_expr",
  "logical_or_expr",
  "logical_and_expr",
  "equality_expr",
  "relational_expr",
  "add_expr",
  "mult_expr",
  "unary_expr",
  "postfix_expr",
  "primary_expr",
  "argument_expr_list_opt",
  "argument_expr_list" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'small-c.y', 5)
  def _reduce_3(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 6)
  def _reduce_4(val, _values, result)
     result.push val[1] 
    result
  end
.,.,

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

module_eval(<<'.,.,', 'small-c.y', 12)
  def _reduce_8(val, _values, result)
     result = Node.new(:decl, {type:val[0][:value], decls:val[1]}, val[0][:pos]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 14)
  def _reduce_9(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 15)
  def _reduce_10(val, _values, result)
     result.push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 17)
  def _reduce_11(val, _values, result)
     result = Node.new(:declarator, val[0], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 18)
  def _reduce_12(val, _values, result)
     result = Node.new(:declarator, ['*', val[1]], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 20)
  def _reduce_13(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 21)
  def _reduce_14(val, _values, result)
     result = [val[0][:value], val[2][:value]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 23)
  def _reduce_15(val, _values, result)
     result = Node.new(:function_proto, {type:val[0][:value], decl:val[1]}, val[0][:pos]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 25)
  def _reduce_16(val, _values, result)
     result = Node.new(:function_decl, {name:[val[0][:value]], params:val[2]}, val[0][:pos]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 26)
  def _reduce_17(val, _values, result)
     result = Node.new(:function_decl, {name:['*', val[1][:value]], params:val[3]}, val[0][:pos]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 29)
  def _reduce_18(val, _values, result)
     result = Node.new(:function_def, {type:val[0][:value], decl:val[1], stmts:val[2]}, val[0][:pos]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 31)
  def _reduce_19(val, _values, result)
     result = [] 
    result
  end
.,.,

# reduce 20 omitted

module_eval(<<'.,.,', 'small-c.y', 34)
  def _reduce_21(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 35)
  def _reduce_22(val, _values, result)
     result.push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 37)
  def _reduce_23(val, _values, result)
     result = Node.new(:param, {type:val[0][:value], name:val[1]}, val[0][:pos]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 39)
  def _reduce_24(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 40)
  def _reduce_25(val, _values, result)
     result = ['*', val[1][:value]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 42)
  def _reduce_26(val, _values, result)
     result[:value] = :int 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 43)
  def _reduce_27(val, _values, result)
     result[:value] = :void 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 45)
  def _reduce_28(val, _values, result)
     result = Node.new(:skip, [], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 46)
  def _reduce_29(val, _values, result)
     result = Node.new(:expr, [val[0]], nil) 
    result
  end
.,.,

# reduce 30 omitted

module_eval(<<'.,.,', 'small-c.y', 48)
  def _reduce_31(val, _values, result)
     result = Node.new(:if, {cond:val[2], stmt:val[4], else_stmt:nil}, val[0][:pos]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 50)
  def _reduce_32(val, _values, result)
     result = Node.new(:if, {cond:val[2], stmt:val[4], else_stmt:val[6]}, val[0][:pos]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 51)
  def _reduce_33(val, _values, result)
     result = Node.new(:while, {cond:val[2], stmt:val[4]}, val[0][:pos]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 53)
  def _reduce_34(val, _values, result)
     # for syntax sugar
                                                                  stmt = val[8]
                                                                  iter = Node.new(:expr, [val[6]], nil)
                                                                  if (!stmt.is_a?(Array) && stmt.type == :compound_stmt)
                                                                    stmt.attr[:stmts].push iter
                                                                  else
                                                                    stmt = Node.new(:compound_stmt, {decls:[], stmts:[stmt, iter].flatten}, val[0][:pos])
                                                                  end
                                                                  result = [
                                                                    Node.new(:expr, [val[2]], nil),
                                                                    Node.new(:while, {cond:val[4], stmt:stmt}, val[0][:pos])
                                                                  ]
                                                                
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 66)
  def _reduce_35(val, _values, result)
     result = Node.new(:return, [val[1]], val[0][:pos]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 69)
  def _reduce_36(val, _values, result)
     result = Node.new(:compound_stmt, {decls:val[1], stmts:val[2]}, val[0][:pos]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 71)
  def _reduce_37(val, _values, result)
     result = [] 
    result
  end
.,.,

# reduce 38 omitted

module_eval(<<'.,.,', 'small-c.y', 74)
  def _reduce_39(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 75)
  def _reduce_40(val, _values, result)
     result.push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 77)
  def _reduce_41(val, _values, result)
     result = [] 
    result
  end
.,.,

# reduce 42 omitted

module_eval(<<'.,.,', 'small-c.y', 80)
  def _reduce_43(val, _values, result)
     result = val[0].is_a?(Array) ? val[0] : [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 81)
  def _reduce_44(val, _values, result)
     result = val[0].push(val[1]).flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 83)
  def _reduce_45(val, _values, result)
     result = [] 
    result
  end
.,.,

# reduce 46 omitted

module_eval(<<'.,.,', 'small-c.y', 86)
  def _reduce_47(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 87)
  def _reduce_48(val, _values, result)
     result.push val[2] 
    result
  end
.,.,

# reduce 49 omitted

module_eval(<<'.,.,', 'small-c.y', 90)
  def _reduce_50(val, _values, result)
     result = Node.new(:assign, [val[0], val[2]], val[1][:pos]) 
    result
  end
.,.,

# reduce 51 omitted

module_eval(<<'.,.,', 'small-c.y', 93)
  def _reduce_52(val, _values, result)
     result = Node.new(:logical_op, ['||', val[0], val[2]], val[1][:pos]) 
    result
  end
.,.,

# reduce 53 omitted

module_eval(<<'.,.,', 'small-c.y', 96)
  def _reduce_54(val, _values, result)
     result = Node.new(:logical_op, ['&&', val[0], val[2]], val[1][:pos]) 
    result
  end
.,.,

# reduce 55 omitted

module_eval(<<'.,.,', 'small-c.y', 99)
  def _reduce_56(val, _values, result)
     result = Node.new(:eq_op, ['==', val[0], val[2]], val[1][:pos]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 100)
  def _reduce_57(val, _values, result)
     result = Node.new(:eq_op, ['!=', val[0], val[2]], val[1][:pos]) 
    result
  end
.,.,

# reduce 58 omitted

module_eval(<<'.,.,', 'small-c.y', 103)
  def _reduce_59(val, _values, result)
     result = Node.new(:rel_op, ['<', val[0], val[2]], val[1][:pos]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 104)
  def _reduce_60(val, _values, result)
     result = Node.new(:rel_op, ['>', val[0], val[2]], val[1][:pos]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 105)
  def _reduce_61(val, _values, result)
     result = Node.new(:rel_op, ['<=', val[0], val[2]], val[1][:pos]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 106)
  def _reduce_62(val, _values, result)
     result = Node.new(:rel_op, ['>=', val[0], val[2]], val[1][:pos]) 
    result
  end
.,.,

# reduce 63 omitted

module_eval(<<'.,.,', 'small-c.y', 109)
  def _reduce_64(val, _values, result)
     result = Node.new(:op, ['+', val[0], val[2]], val[1][:pos]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 110)
  def _reduce_65(val, _values, result)
     result = Node.new(:op, ['-', val[0], val[2]], val[1][:pos]) 
    result
  end
.,.,

# reduce 66 omitted

module_eval(<<'.,.,', 'small-c.y', 113)
  def _reduce_67(val, _values, result)
     result = Node.new(:op, ['*', val[0], val[2]], val[1][:pos]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 114)
  def _reduce_68(val, _values, result)
     result = Node.new(:op, ['/', val[0], val[2]], val[1][:pos]) 
    result
  end
.,.,

# reduce 69 omitted

module_eval(<<'.,.,', 'small-c.y', 117)
  def _reduce_70(val, _values, result)
     result = Node.new(:op, ['-', Node.new(:number, {value:0}, nil), val[1]], val[0][:pos]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 118)
  def _reduce_71(val, _values, result)
     # for syntax sugar
                                                                  if val[1].type == :pointer
                                                                    result = val[1].attr[0]
                                                                  else
                                                                    result = Node.new(:address, [val[1]], val[0][:pos])
                                                                  end
                                                                
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 125)
  def _reduce_72(val, _values, result)
     result = Node.new(:pointer, [val[1]], val[0][:pos]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 127)
  def _reduce_73(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 128)
  def _reduce_74(val, _values, result)
     result = Node.new(:pointer, [Node.new(:op, ['+', val[0], Node.new(:expr, [val[2]], val[1][:pos])], nil)], val[0].pos) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 129)
  def _reduce_75(val, _values, result)
     result = Node.new(:call, {name:val[0][:value], args:val[2]}, val[0][:pos]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 131)
  def _reduce_76(val, _values, result)
     result = Node.new(:variable, {name:val[0][:value]}, val[0][:pos]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 132)
  def _reduce_77(val, _values, result)
     result = Node.new(:number, {value:val[0][:value]}, val[0][:pos]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 133)
  def _reduce_78(val, _values, result)
     result = Node.new(:expr, [val[1]], val[0][:pos]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 135)
  def _reduce_79(val, _values, result)
     result = [] 
    result
  end
.,.,

# reduce 80 omitted

module_eval(<<'.,.,', 'small-c.y', 138)
  def _reduce_81(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'small-c.y', 139)
  def _reduce_82(val, _values, result)
     result.push val[2] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parse
  end   # module SmallC
